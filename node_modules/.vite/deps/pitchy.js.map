{
  "version": 3,
  "sources": ["../../fft.js/lib/fft.js", "../../pitchy/index.js"],
  "sourcesContent": ["'use strict';\n\nfunction FFT(size) {\n  this.size = size | 0;\n  if (this.size <= 1 || (this.size & (this.size - 1)) !== 0)\n    throw new Error('FFT size must be a power of two and bigger than 1');\n\n  this._csize = size << 1;\n\n  // NOTE: Use of `var` is intentional for old V8 versions\n  var table = new Array(this.size * 2);\n  for (var i = 0; i < table.length; i += 2) {\n    const angle = Math.PI * i / this.size;\n    table[i] = Math.cos(angle);\n    table[i + 1] = -Math.sin(angle);\n  }\n  this.table = table;\n\n  // Find size's power of two\n  var power = 0;\n  for (var t = 1; this.size > t; t <<= 1)\n    power++;\n\n  // Calculate initial step's width:\n  //   * If we are full radix-4 - it is 2x smaller to give inital len=8\n  //   * Otherwise it is the same as `power` to give len=4\n  this._width = power % 2 === 0 ? power - 1 : power;\n\n  // Pre-compute bit-reversal patterns\n  this._bitrev = new Array(1 << this._width);\n  for (var j = 0; j < this._bitrev.length; j++) {\n    this._bitrev[j] = 0;\n    for (var shift = 0; shift < this._width; shift += 2) {\n      var revShift = this._width - shift - 2;\n      this._bitrev[j] |= ((j >>> shift) & 3) << revShift;\n    }\n  }\n\n  this._out = null;\n  this._data = null;\n  this._inv = 0;\n}\nmodule.exports = FFT;\n\nFFT.prototype.fromComplexArray = function fromComplexArray(complex, storage) {\n  var res = storage || new Array(complex.length >>> 1);\n  for (var i = 0; i < complex.length; i += 2)\n    res[i >>> 1] = complex[i];\n  return res;\n};\n\nFFT.prototype.createComplexArray = function createComplexArray() {\n  const res = new Array(this._csize);\n  for (var i = 0; i < res.length; i++)\n    res[i] = 0;\n  return res;\n};\n\nFFT.prototype.toComplexArray = function toComplexArray(input, storage) {\n  var res = storage || this.createComplexArray();\n  for (var i = 0; i < res.length; i += 2) {\n    res[i] = input[i >>> 1];\n    res[i + 1] = 0;\n  }\n  return res;\n};\n\nFFT.prototype.completeSpectrum = function completeSpectrum(spectrum) {\n  var size = this._csize;\n  var half = size >>> 1;\n  for (var i = 2; i < half; i += 2) {\n    spectrum[size - i] = spectrum[i];\n    spectrum[size - i + 1] = -spectrum[i + 1];\n  }\n};\n\nFFT.prototype.transform = function transform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._transform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.realTransform = function realTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._realTransform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.inverseTransform = function inverseTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 1;\n  this._transform4();\n  for (var i = 0; i < out.length; i++)\n    out[i] /= this.size;\n  this._out = null;\n  this._data = null;\n};\n\n// radix-4 implementation\n//\n// NOTE: Uses of `var` are intentional for older V8 version that do not\n// support both `let compound assignments` and `const phi`\nFFT.prototype._transform4 = function _transform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform2(outOff, off, step);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform4(outOff, off, step);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var quarterLen = len >>> 2;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      // Full case\n      var limit = outOff + quarterLen;\n      for (var i = outOff, k = 0; i < limit; i += 2, k += step) {\n        const A = i;\n        const B = A + quarterLen;\n        const C = B + quarterLen;\n        const D = C + quarterLen;\n\n        // Original values\n        const Ar = out[A];\n        const Ai = out[A + 1];\n        const Br = out[B];\n        const Bi = out[B + 1];\n        const Cr = out[C];\n        const Ci = out[C + 1];\n        const Dr = out[D];\n        const Di = out[D + 1];\n\n        // Middle values\n        const MAr = Ar;\n        const MAi = Ai;\n\n        const tableBr = table[k];\n        const tableBi = inv * table[k + 1];\n        const MBr = Br * tableBr - Bi * tableBi;\n        const MBi = Br * tableBi + Bi * tableBr;\n\n        const tableCr = table[2 * k];\n        const tableCi = inv * table[2 * k + 1];\n        const MCr = Cr * tableCr - Ci * tableCi;\n        const MCi = Cr * tableCi + Ci * tableCr;\n\n        const tableDr = table[3 * k];\n        const tableDi = inv * table[3 * k + 1];\n        const MDr = Dr * tableDr - Di * tableDi;\n        const MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        const T0r = MAr + MCr;\n        const T0i = MAi + MCi;\n        const T1r = MAr - MCr;\n        const T1i = MAi - MCi;\n        const T2r = MBr + MDr;\n        const T2i = MBi + MDi;\n        const T3r = inv * (MBr - MDr);\n        const T3i = inv * (MBi - MDi);\n\n        // Final values\n        const FAr = T0r + T2r;\n        const FAi = T0i + T2i;\n\n        const FCr = T0r - T2r;\n        const FCi = T0i - T2i;\n\n        const FBr = T1r + T3i;\n        const FBi = T1i - T3r;\n\n        const FDr = T1r - T3i;\n        const FDi = T1i + T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n        out[C] = FCr;\n        out[C + 1] = FCi;\n        out[D] = FDr;\n        out[D + 1] = FDi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleTransform2 = function _singleTransform2(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const evenI = data[off + 1];\n  const oddR = data[off + step];\n  const oddI = data[off + step + 1];\n\n  const leftR = evenR + oddR;\n  const leftI = evenI + oddI;\n  const rightR = evenR - oddR;\n  const rightI = evenI - oddI;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = leftI;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = rightI;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleTransform4 = function _singleTransform4(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Ai = data[off + 1];\n  const Br = data[off + step];\n  const Bi = data[off + step + 1];\n  const Cr = data[off + step2];\n  const Ci = data[off + step2 + 1];\n  const Dr = data[off + step3];\n  const Di = data[off + step3 + 1];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T0i = Ai + Ci;\n  const T1r = Ar - Cr;\n  const T1i = Ai - Ci;\n  const T2r = Br + Dr;\n  const T2i = Bi + Di;\n  const T3r = inv * (Br - Dr);\n  const T3i = inv * (Bi - Di);\n\n  // Final values\n  const FAr = T0r + T2r;\n  const FAi = T0i + T2i;\n\n  const FBr = T1r + T3i;\n  const FBi = T1i - T3r;\n\n  const FCr = T0r - T2r;\n  const FCi = T0i - T2i;\n\n  const FDr = T1r - T3i;\n  const FDi = T1i + T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = FAi;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = FCi;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n\n// Real input radix-4 implementation\nFFT.prototype._realTransform4 = function _realTransform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform2(outOff, off >>> 1, step >>> 1);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform4(outOff, off >>> 1, step >>> 1);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var halfLen = len >>> 1;\n    var quarterLen = halfLen >>> 1;\n    var hquarterLen = quarterLen >>> 1;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      for (var i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {\n        var A = outOff + i;\n        var B = A + quarterLen;\n        var C = B + quarterLen;\n        var D = C + quarterLen;\n\n        // Original values\n        var Ar = out[A];\n        var Ai = out[A + 1];\n        var Br = out[B];\n        var Bi = out[B + 1];\n        var Cr = out[C];\n        var Ci = out[C + 1];\n        var Dr = out[D];\n        var Di = out[D + 1];\n\n        // Middle values\n        var MAr = Ar;\n        var MAi = Ai;\n\n        var tableBr = table[k];\n        var tableBi = inv * table[k + 1];\n        var MBr = Br * tableBr - Bi * tableBi;\n        var MBi = Br * tableBi + Bi * tableBr;\n\n        var tableCr = table[2 * k];\n        var tableCi = inv * table[2 * k + 1];\n        var MCr = Cr * tableCr - Ci * tableCi;\n        var MCi = Cr * tableCi + Ci * tableCr;\n\n        var tableDr = table[3 * k];\n        var tableDi = inv * table[3 * k + 1];\n        var MDr = Dr * tableDr - Di * tableDi;\n        var MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        var T0r = MAr + MCr;\n        var T0i = MAi + MCi;\n        var T1r = MAr - MCr;\n        var T1i = MAi - MCi;\n        var T2r = MBr + MDr;\n        var T2i = MBi + MDi;\n        var T3r = inv * (MBr - MDr);\n        var T3i = inv * (MBi - MDi);\n\n        // Final values\n        var FAr = T0r + T2r;\n        var FAi = T0i + T2i;\n\n        var FBr = T1r + T3i;\n        var FBi = T1i - T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n\n        // Output final middle point\n        if (i === 0) {\n          var FCr = T0r - T2r;\n          var FCi = T0i - T2i;\n          out[C] = FCr;\n          out[C + 1] = FCi;\n          continue;\n        }\n\n        // Do not overwrite ourselves\n        if (i === hquarterLen)\n          continue;\n\n        // In the flipped case:\n        // MAi = -MAi\n        // MBr=-MBi, MBi=-MBr\n        // MCr=-MCr\n        // MDr=MDi, MDi=MDr\n        var ST0r = T1r;\n        var ST0i = -T1i;\n        var ST1r = T0r;\n        var ST1i = -T0i;\n        var ST2r = -inv * T3i;\n        var ST2i = -inv * T3r;\n        var ST3r = -inv * T2i;\n        var ST3i = -inv * T2r;\n\n        var SFAr = ST0r + ST2r;\n        var SFAi = ST0i + ST2i;\n\n        var SFBr = ST1r + ST3i;\n        var SFBi = ST1i - ST3r;\n\n        var SA = outOff + quarterLen - i;\n        var SB = outOff + halfLen - i;\n\n        out[SA] = SFAr;\n        out[SA + 1] = SFAi;\n        out[SB] = SFBr;\n        out[SB + 1] = SFBi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleRealTransform2 = function _singleRealTransform2(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const oddR = data[off + step];\n\n  const leftR = evenR + oddR;\n  const rightR = evenR - oddR;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = 0;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleRealTransform4 = function _singleRealTransform4(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Br = data[off + step];\n  const Cr = data[off + step2];\n  const Dr = data[off + step3];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T1r = Ar - Cr;\n  const T2r = Br + Dr;\n  const T3r = inv * (Br - Dr);\n\n  // Final values\n  const FAr = T0r + T2r;\n\n  const FBr = T1r;\n  const FBi = -T3r;\n\n  const FCr = T0r - T2r;\n\n  const FDr = T1r;\n  const FDi = T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = 0;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n", "import FFT from \"fft.js\";\n\n/**\n * @typedef {Float32Array | Float64Array | number[]} Buffer One of the supported\n * buffer types. Other numeric array types may not work correctly.\n */\n\n/**\n * A class that can perform autocorrelation on input arrays of a given size.\n *\n * The class holds internal buffers so that no additional allocations are\n * necessary while performing the operation.\n *\n * @template {Buffer} T the buffer type to use. While inputs to the\n * autocorrelation process can be any array-like type, the output buffer\n * (whether provided explicitly or using a fresh buffer) is always of this type.\n */\nexport class Autocorrelator {\n  /** @private @readonly @type {number} */\n  _inputLength;\n  /** @private @type {FFT} */\n  _fft;\n  /** @private @type {(size: number) => T} */\n  _bufferSupplier;\n  /** @private @type {T} */\n  _paddedInputBuffer;\n  /** @private @type {T} */\n  _transformBuffer;\n  /** @private @type {T} */\n  _inverseBuffer;\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using\n   * {@link Float32Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<Float32Array>}\n   */\n  static forFloat32Array(inputLength) {\n    return new Autocorrelator(\n      inputLength,\n      (length) => new Float32Array(length),\n    );\n  }\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using\n   * {@link Float64Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<Float64Array>}\n   */\n  static forFloat64Array(inputLength) {\n    return new Autocorrelator(\n      inputLength,\n      (length) => new Float64Array(length),\n    );\n  }\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using `number[]`\n   * buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<number[]>}\n   */\n  static forNumberArray(inputLength) {\n    return new Autocorrelator(inputLength, (length) => Array(length));\n  }\n\n  /**\n   * Constructs a new {@link Autocorrelator} able to handle input arrays of the\n   * given length.\n   *\n   * @param inputLength {number} the input array length to support. This\n   * `Autocorrelator` will only support operation on arrays of this length.\n   * @param bufferSupplier {(length: number) => T} the function to use for\n   * creating buffers, accepting the length of the buffer to create and\n   * returning a new buffer of that length. The values of the returned buffer\n   * need not be initialized in any particular way.\n   */\n  constructor(inputLength, bufferSupplier) {\n    if (inputLength < 1) {\n      throw new Error(`Input length must be at least one`);\n    }\n    this._inputLength = inputLength;\n    // We need to double the input length to get correct results, and the FFT\n    // algorithm we use requires a length that's a power of 2\n    this._fft = new FFT(ceilPow2(2 * inputLength));\n    this._bufferSupplier = bufferSupplier;\n    this._paddedInputBuffer = this._bufferSupplier(this._fft.size);\n    this._transformBuffer = this._bufferSupplier(2 * this._fft.size);\n    this._inverseBuffer = this._bufferSupplier(2 * this._fft.size);\n  }\n\n  /**\n   * Returns the supported input length.\n   *\n   * @returns {number} the supported input length\n   */\n  get inputLength() {\n    return this._inputLength;\n  }\n\n  /**\n   * Autocorrelates the given input data.\n   *\n   * @param input {ArrayLike<number>} the input data to autocorrelate\n   * @param output {T} the output buffer into which to write the autocorrelated\n   * data. If not provided, a new buffer will be created.\n   * @returns {T} `output`\n   */\n  autocorrelate(input, output = this._bufferSupplier(input.length)) {\n    if (input.length !== this._inputLength) {\n      throw new Error(\n        `Input must have length ${this._inputLength} but had length ${input.length}`,\n      );\n    }\n    // Step 0: pad the input array with zeros\n    for (let i = 0; i < input.length; i++) {\n      this._paddedInputBuffer[i] = input[i];\n    }\n    for (let i = input.length; i < this._paddedInputBuffer.length; i++) {\n      this._paddedInputBuffer[i] = 0;\n    }\n\n    // Step 1: get the DFT of the input array\n    this._fft.realTransform(this._transformBuffer, this._paddedInputBuffer);\n    // We need to fill in the right half of the array too\n    this._fft.completeSpectrum(this._transformBuffer);\n    // Step 2: multiply each entry by its conjugate\n    const tb = this._transformBuffer;\n    for (let i = 0; i < tb.length; i += 2) {\n      tb[i] = tb[i] * tb[i] + tb[i + 1] * tb[i + 1];\n      tb[i + 1] = 0;\n    }\n    // Step 3: perform the inverse transform\n    this._fft.inverseTransform(this._inverseBuffer, this._transformBuffer);\n\n    // This last result (the inverse transform) contains the autocorrelation\n    // data, which is completely real\n    for (let i = 0; i < input.length; i++) {\n      output[i] = this._inverseBuffer[2 * i];\n    }\n    return output;\n  }\n}\n\n/**\n * Returns an array of all the key maximum positions in the given input array.\n *\n * In McLeod's paper, a key maximum is the highest maximum between a positively\n * sloped zero crossing and a negatively sloped one.\n *\n * TODO: it may be more efficient not to construct a new output array each time,\n * but that would also make the code more complicated (more so than the changes\n * that were needed to remove the other allocations).\n *\n * @param input {ArrayLike<number>}\n * @returns {number[]}\n */\nfunction getKeyMaximumIndices(input) {\n  // The indices of the key maxima\n  /** @type {number[]} */ const keyIndices = [];\n  // Whether the last zero crossing found was positively sloped; equivalently,\n  // whether we're looking for a key maximum\n  let lookingForMaximum = false;\n  // The largest local maximum found so far\n  let max = -Infinity;\n  // The index of the largest local maximum so far\n  let maxIndex = -1;\n\n  for (let i = 1; i < input.length - 1; i++) {\n    if (input[i - 1] <= 0 && input[i] > 0) {\n      // Positively sloped zero crossing\n      lookingForMaximum = true;\n      maxIndex = i;\n      max = input[i];\n    } else if (input[i - 1] > 0 && input[i] <= 0) {\n      // Negatively sloped zero crossing\n      lookingForMaximum = false;\n      if (maxIndex !== -1) {\n        keyIndices.push(maxIndex);\n      }\n    } else if (lookingForMaximum && input[i] > max) {\n      max = input[i];\n      maxIndex = i;\n    }\n  }\n\n  return keyIndices;\n}\n\n/**\n * Refines the chosen key maximum index chosen from the given data by\n * interpolating a parabola using the key maximum index and its two neighbors\n * and finding the position of that parabola's maximum value.\n *\n * This is described in section 5 of the MPM paper as a way to refine the\n * position of the maximum.\n *\n * @param index {number} the chosen key maximum index. This must be between `1`\n * and `data.length - 2`, inclusive, since it and its two neighbors need to be\n * valid indexes of `data`.\n * @param data {ArrayLike<number>} the input array from which `index` was chosen\n * @returns {[number, number]} a pair consisting of the refined key maximum index and the\n * interpolated value of `data` at that index (the latter of which is used as a\n * measure of clarity)\n */\nfunction refineResultIndex(index, data) {\n  const [x0, x1, x2] = [index - 1, index, index + 1];\n  const [y0, y1, y2] = [data[x0], data[x1], data[x2]];\n\n  // The parabola going through the three data points can be written as\n  // y = y0(x - x1)(x - x2)/(x0 - x1)(x0 - x2)\n  //   + y1(x - x0)(x - x2)/(x1 - x0)(x1 - x2)\n  //   + y2(x - x0)(x - x1)/(x2 - x0)(x2 - x1)\n  // Given the definitions of x0, x1, and x2, we can simplify the denominators:\n  // y = y0(x - x1)(x - x2)/2\n  //   - y1(x - x0)(x - x2)\n  //   + y2(x - x0)(x - x1)/2\n  // We can expand this out and get the coefficients in standard form:\n  // a = y0/2 - y1 + y2/2\n  // b = -(y0/2)(x1 + x2) + y1(x0 + x2) - (y2/2)(x0 + x1)\n  // c = y0x1x2/2 - y1x0x2 + y2x0x1/2\n  // The index of the maximum is -b / 2a (by solving for x where the derivative\n  // is 0).\n\n  const a = y0 / 2 - y1 + y2 / 2;\n  const b = -(y0 / 2) * (x1 + x2) + y1 * (x0 + x2) - (y2 / 2) * (x0 + x1);\n  const c = (y0 * x1 * x2) / 2 - y1 * x0 * x2 + (y2 * x0 * x1) / 2;\n\n  const xMax = -b / (2 * a);\n  const yMax = a * xMax * xMax + b * xMax + c;\n  return [xMax, yMax];\n}\n\n/**\n * A class that can detect the pitch of a note from a time-domain input array.\n *\n * This class uses the McLeod pitch method (MPM) to detect pitches. MPM is\n * described in the paper 'A Smarter Way to Find Pitch' by Philip McLeod and\n * Geoff Wyvill\n * (http://miracle.otago.ac.nz/tartini/papers/A_Smarter_Way_to_Find_Pitch.pdf).\n *\n * The class holds internal buffers so that a minimal number of additional\n * allocations are necessary while performing the operation.\n *\n * @template {Buffer} T the buffer type to use internally. Inputs to the\n * pitch-detection process can be any numeric array type.\n */\nexport class PitchDetector {\n  /** @private @type {Autocorrelator<T>} */\n  _autocorrelator;\n  /** @private @type {T} */\n  _nsdfBuffer;\n  /** @private @type {number} */\n  _clarityThreshold = 0.9;\n  /** @private @type {number} */\n  _minVolumeAbsolute = 0.0;\n  /** @private @type {number} */\n  _maxInputAmplitude = 1.0;\n\n  /**\n   * A helper method to create an {@link PitchDetector} using {@link Float32Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<Float32Array>}\n   */\n  static forFloat32Array(inputLength) {\n    return new PitchDetector(inputLength, (length) => new Float32Array(length));\n  }\n\n  /**\n   * A helper method to create an {@link PitchDetector} using {@link Float64Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<Float64Array>}\n   */\n  static forFloat64Array(inputLength) {\n    return new PitchDetector(inputLength, (length) => new Float64Array(length));\n  }\n\n  /**\n   * A helper method to create an {@link PitchDetector} using `number[]` buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<number[]>}\n   */\n  static forNumberArray(inputLength) {\n    return new PitchDetector(inputLength, (length) => Array(length));\n  }\n\n  /**\n   * Constructs a new {@link PitchDetector} able to handle input arrays of the\n   * given length.\n   *\n   * @param inputLength {number} the input array length to support. This\n   * `PitchDetector` will only support operation on arrays of this length.\n   * @param bufferSupplier {(inputLength: number) => T} the function to use for\n   * creating buffers, accepting the length of the buffer to create and\n   * returning a new buffer of that length. The values of the returned buffer\n   * need not be initialized in any particular way.\n   */\n  constructor(inputLength, bufferSupplier) {\n    this._autocorrelator = new Autocorrelator(inputLength, bufferSupplier);\n    this._nsdfBuffer = bufferSupplier(inputLength);\n  }\n\n  /**\n   * Returns the supported input length.\n   *\n   * @returns {number} the supported input length\n   */\n  get inputLength() {\n    return this._autocorrelator.inputLength;\n  }\n\n  /**\n   * Sets the clarity threshold used when identifying the correct pitch (the constant\n   * `k` from the MPM paper). The value must be between 0 (exclusive) and 1\n   * (inclusive), with the most suitable range being between 0.8 and 1.\n   *\n   * @param threshold {number} the clarity threshold\n   */\n  set clarityThreshold(threshold) {\n    if (!Number.isFinite(threshold) || threshold <= 0 || threshold > 1) {\n      throw new Error(\"clarityThreshold must be a number in the range (0, 1]\");\n    }\n    this._clarityThreshold = threshold;\n  }\n\n  /**\n   * Sets the minimum detectable volume, as an absolute number between 0 and\n   * `maxInputAmplitude`, inclusive, to consider in a sample when detecting the\n   * pitch. If a sample fails to meet this minimum volume, `findPitch` will\n   * return a clarity of 0.\n   *\n   * Volume is calculated as the RMS (root mean square) of the input samples.\n   *\n   * @param volume {number} the minimum volume as an absolute amplitude value\n   */\n  set minVolumeAbsolute(volume) {\n    if (\n      !Number.isFinite(volume) ||\n      volume < 0 ||\n      volume > this._maxInputAmplitude\n    ) {\n      throw new Error(\n        `minVolumeAbsolute must be a number in the range [0, ${this._maxInputAmplitude}]`,\n      );\n    }\n    this._minVolumeAbsolute = volume;\n  }\n\n  /**\n   * Sets the minimum volume using a decibel measurement. Must be less than or\n   * equal to 0: 0 indicates the loudest possible sound (see\n   * `maxInputAmplitude`), -10 is a sound with a tenth of the volume of the\n   * loudest possible sound, etc.\n   *\n   * Volume is calculated as the RMS (root mean square) of the input samples.\n   *\n   * @param db {number} the minimum volume in decibels, with 0 being the loudest\n   * sound\n   */\n  set minVolumeDecibels(db) {\n    if (!Number.isFinite(db) || db > 0) {\n      throw new Error(\"minVolumeDecibels must be a number <= 0\");\n    }\n    this._minVolumeAbsolute = this._maxInputAmplitude * 10 ** (db / 10);\n  }\n\n  /**\n   * Sets the maximum amplitude of an input reading. Must be greater than 0.\n   *\n   * @param amplitude {number} the maximum amplitude (absolute value) of an input reading\n   */\n  set maxInputAmplitude(amplitude) {\n    if (!Number.isFinite(amplitude) || amplitude <= 0) {\n      throw new Error(\"maxInputAmplitude must be a number > 0\");\n    }\n    this._maxInputAmplitude = amplitude;\n  }\n\n  /**\n   * Returns the pitch detected using McLeod Pitch Method (MPM) along with a\n   * measure of its clarity.\n   *\n   * The clarity is a value between 0 and 1 (potentially inclusive) that\n   * represents how \"clear\" the pitch was. A clarity value of 1 indicates that\n   * the pitch was very distinct, while lower clarity values indicate less\n   * definite pitches.\n   *\n   * @param input {ArrayLike<number>} the time-domain input data\n   * @param sampleRate {number} the sample rate at which the input data was\n   * collected\n   * @returns {[number, number]} the detected pitch, in Hz, followed by the\n   * clarity. If a pitch cannot be determined from the input, such as if the\n   * volume is too low (see `minVolumeAbsolute` and `minVolumeDecibels`), this\n   * will be `[0, 0]`.\n   */\n  findPitch(input, sampleRate) {\n    // If the highest key maximum is less than the minimum volume, we don't need\n    // to bother detecting the pitch, as the sample is too quiet.\n    if (this._belowMinimumVolume(input)) return [0, 0];\n    this._nsdf(input);\n    const keyMaximumIndices = getKeyMaximumIndices(this._nsdfBuffer);\n    if (keyMaximumIndices.length === 0) {\n      // No key maxima means that we either don't have enough data to analyze or\n      // that the data was flawed (such as an input array of zeroes)\n      return [0, 0];\n    }\n    // The highest key maximum\n    const nMax = Math.max(...keyMaximumIndices.map((i) => this._nsdfBuffer[i]));\n    // Following the paper, we return the pitch corresponding to the first key\n    // maximum higher than K * nMax. This is guaranteed not to be undefined, since\n    // we know of at least one key maximum satisfying this condition (whichever\n    // key maximum gave us nMax).\n    const resultIndex = keyMaximumIndices.find(\n      (i) => this._nsdfBuffer[i] >= this._clarityThreshold * nMax,\n    );\n    const [refinedResultIndex, clarity] = refineResultIndex(\n      // @ts-expect-error resultIndex is guaranteed to be defined\n      resultIndex,\n      this._nsdfBuffer,\n    );\n\n    // Due to floating point errors, the clarity may occasionally come out to be\n    // slightly over 1.0. We can avoid incorrect results by clamping the value.\n    return [sampleRate / refinedResultIndex, Math.min(clarity, 1.0)];\n  }\n\n  /**\n   * Returns whether the input audio data is below the minimum volume allowed by\n   * the pitch detector.\n   *\n   * @private\n   * @param input {ArrayLike<number>}\n   * @returns {boolean}\n   */\n  _belowMinimumVolume(input) {\n    if (this._minVolumeAbsolute === 0) return false;\n    let squareSum = 0;\n    for (let i = 0; i < input.length; i++) {\n      squareSum += input[i] ** 2;\n    }\n    return Math.sqrt(squareSum / input.length) < this._minVolumeAbsolute;\n  }\n\n  /**\n   * Computes the NSDF of the input and stores it in the internal buffer. This\n   * is equation (9) in the McLeod pitch method paper.\n   *\n   * @private\n   * @param input {ArrayLike<number>}\n   */\n  _nsdf(input) {\n    // The function r'(tau) is the autocorrelation\n    this._autocorrelator.autocorrelate(input, this._nsdfBuffer);\n    // The function m'(tau) (defined in equation (6)) can be computed starting\n    // with m'(0), which is equal to 2r'(0), and then iteratively modified to\n    // get m'(1), m'(2), etc. For example, to get m'(1), we take m'(0) and\n    // subtract x_0^2 and x_{W-1}^2. Then, to get m'(2), we take m'(1) and\n    // subtract x_1^2 and x_{W-2}^2, and further values are similar (see the\n    // note at the end of section 6 in the MPM paper).\n    //\n    // The resulting array values are 2 * r'(tau) / m'(tau). We use m below as\n    // the incremental value of m'.\n    let m = 2 * this._nsdfBuffer[0];\n    /** @type {number} */ let i;\n    // As pointed out by issuefiler on GitHub, we can take advantage of the fact\n    // that m will never increase to avoid division by zero by ending this loop\n    // once m === 0. The rest of the array values after m becomes 0 will just be\n    // set to 0 themselves. We actually check for m > 0 rather than m === 0\n    // because there may be small floating-point errors that cause m to become\n    // negative rather than exactly 0.\n    for (i = 0; i < this._nsdfBuffer.length && m > 0; i++) {\n      this._nsdfBuffer[i] = (2 * this._nsdfBuffer[i]) / m;\n      m -= input[i] ** 2 + input[input.length - i - 1] ** 2;\n    }\n    // If there are any array values remaining, it means m === 0 for those\n    // values of tau, so we can just set them to 0\n    for (; i < this._nsdfBuffer.length; i++) {\n      this._nsdfBuffer[i] = 0;\n    }\n  }\n}\n\n/**\n * Rounds up the input to the next power of 2.\n *\n * @param {number} v\n * @returns {number} the next power of 2 at least as large as `v`\n */\nfunction ceilPow2(v) {\n  // https://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2\n  v--;\n  v |= v >> 1;\n  v |= v >> 2;\n  v |= v >> 4;\n  v |= v >> 8;\n  v |= v >> 16;\n  v++;\n  return v;\n}\n"],
  "mappings": ";;;;;;AAAA;AAAA;AAAA;AAEA,aAASA,KAAI,MAAM;AACjB,WAAK,OAAO,OAAO;AACnB,UAAI,KAAK,QAAQ,MAAM,KAAK,OAAQ,KAAK,OAAO,OAAQ;AACtD,cAAM,IAAI,MAAM,mDAAmD;AAErE,WAAK,SAAS,QAAQ;AAGtB,UAAI,QAAQ,IAAI,MAAM,KAAK,OAAO,CAAC;AACnC,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACxC,cAAM,QAAQ,KAAK,KAAK,IAAI,KAAK;AACjC,cAAM,CAAC,IAAI,KAAK,IAAI,KAAK;AACzB,cAAM,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK;AAAA,MAChC;AACA,WAAK,QAAQ;AAGb,UAAI,QAAQ;AACZ,eAAS,IAAI,GAAG,KAAK,OAAO,GAAG,MAAM;AACnC;AAKF,WAAK,SAAS,QAAQ,MAAM,IAAI,QAAQ,IAAI;AAG5C,WAAK,UAAU,IAAI,MAAM,KAAK,KAAK,MAAM;AACzC,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC5C,aAAK,QAAQ,CAAC,IAAI;AAClB,iBAAS,QAAQ,GAAG,QAAQ,KAAK,QAAQ,SAAS,GAAG;AACnD,cAAI,WAAW,KAAK,SAAS,QAAQ;AACrC,eAAK,QAAQ,CAAC,MAAO,MAAM,QAAS,MAAM;AAAA,QAC5C;AAAA,MACF;AAEA,WAAK,OAAO;AACZ,WAAK,QAAQ;AACb,WAAK,OAAO;AAAA,IACd;AACA,WAAO,UAAUA;AAEjB,IAAAA,KAAI,UAAU,mBAAmB,SAAS,iBAAiB,SAAS,SAAS;AAC3E,UAAI,MAAM,WAAW,IAAI,MAAM,QAAQ,WAAW,CAAC;AACnD,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,YAAI,MAAM,CAAC,IAAI,QAAQ,CAAC;AAC1B,aAAO;AAAA,IACT;AAEA,IAAAA,KAAI,UAAU,qBAAqB,SAAS,qBAAqB;AAC/D,YAAM,MAAM,IAAI,MAAM,KAAK,MAAM;AACjC,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ;AAC9B,YAAI,CAAC,IAAI;AACX,aAAO;AAAA,IACT;AAEA,IAAAA,KAAI,UAAU,iBAAiB,SAAS,eAAe,OAAO,SAAS;AACrE,UAAI,MAAM,WAAW,KAAK,mBAAmB;AAC7C,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK,GAAG;AACtC,YAAI,CAAC,IAAI,MAAM,MAAM,CAAC;AACtB,YAAI,IAAI,CAAC,IAAI;AAAA,MACf;AACA,aAAO;AAAA,IACT;AAEA,IAAAA,KAAI,UAAU,mBAAmB,SAAS,iBAAiB,UAAU;AACnE,UAAI,OAAO,KAAK;AAChB,UAAI,OAAO,SAAS;AACpB,eAAS,IAAI,GAAG,IAAI,MAAM,KAAK,GAAG;AAChC,iBAAS,OAAO,CAAC,IAAI,SAAS,CAAC;AAC/B,iBAAS,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC;AAAA,MAC1C;AAAA,IACF;AAEA,IAAAA,KAAI,UAAU,YAAY,SAAS,UAAU,KAAK,MAAM;AACtD,UAAI,QAAQ;AACV,cAAM,IAAI,MAAM,4CAA4C;AAE9D,WAAK,OAAO;AACZ,WAAK,QAAQ;AACb,WAAK,OAAO;AACZ,WAAK,YAAY;AACjB,WAAK,OAAO;AACZ,WAAK,QAAQ;AAAA,IACf;AAEA,IAAAA,KAAI,UAAU,gBAAgB,SAAS,cAAc,KAAK,MAAM;AAC9D,UAAI,QAAQ;AACV,cAAM,IAAI,MAAM,4CAA4C;AAE9D,WAAK,OAAO;AACZ,WAAK,QAAQ;AACb,WAAK,OAAO;AACZ,WAAK,gBAAgB;AACrB,WAAK,OAAO;AACZ,WAAK,QAAQ;AAAA,IACf;AAEA,IAAAA,KAAI,UAAU,mBAAmB,SAAS,iBAAiB,KAAK,MAAM;AACpE,UAAI,QAAQ;AACV,cAAM,IAAI,MAAM,4CAA4C;AAE9D,WAAK,OAAO;AACZ,WAAK,QAAQ;AACb,WAAK,OAAO;AACZ,WAAK,YAAY;AACjB,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ;AAC9B,YAAI,CAAC,KAAK,KAAK;AACjB,WAAK,OAAO;AACZ,WAAK,QAAQ;AAAA,IACf;AAMA,IAAAA,KAAI,UAAU,cAAc,SAAS,cAAc;AACjD,UAAI,MAAM,KAAK;AACf,UAAI,OAAO,KAAK;AAGhB,UAAI,QAAQ,KAAK;AACjB,UAAI,OAAO,KAAK;AAChB,UAAI,MAAO,OAAO,QAAS;AAE3B,UAAI;AACJ,UAAI;AACJ,UAAI,SAAS,KAAK;AAClB,UAAI,QAAQ,GAAG;AACb,aAAK,SAAS,GAAG,IAAI,GAAG,SAAS,MAAM,UAAU,KAAK,KAAK;AACzD,gBAAM,MAAM,OAAO,CAAC;AACpB,eAAK,kBAAkB,QAAQ,KAAK,IAAI;AAAA,QAC1C;AAAA,MACF,OAAO;AAEL,aAAK,SAAS,GAAG,IAAI,GAAG,SAAS,MAAM,UAAU,KAAK,KAAK;AACzD,gBAAM,MAAM,OAAO,CAAC;AACpB,eAAK,kBAAkB,QAAQ,KAAK,IAAI;AAAA,QAC1C;AAAA,MACF;AAGA,UAAI,MAAM,KAAK,OAAO,KAAK;AAC3B,UAAI,QAAQ,KAAK;AACjB,WAAK,SAAS,GAAG,QAAQ,GAAG,SAAS,GAAG;AACtC,cAAO,OAAO,QAAS;AACvB,YAAI,aAAa,QAAQ;AAGzB,aAAK,SAAS,GAAG,SAAS,MAAM,UAAU,KAAK;AAE7C,cAAI,QAAQ,SAAS;AACrB,mBAAS,IAAI,QAAQ,IAAI,GAAG,IAAI,OAAO,KAAK,GAAG,KAAK,MAAM;AACxD,kBAAM,IAAI;AACV,kBAAM,IAAI,IAAI;AACd,kBAAM,IAAI,IAAI;AACd,kBAAM,IAAI,IAAI;AAGd,kBAAM,KAAK,IAAI,CAAC;AAChB,kBAAM,KAAK,IAAI,IAAI,CAAC;AACpB,kBAAM,KAAK,IAAI,CAAC;AAChB,kBAAM,KAAK,IAAI,IAAI,CAAC;AACpB,kBAAM,KAAK,IAAI,CAAC;AAChB,kBAAM,KAAK,IAAI,IAAI,CAAC;AACpB,kBAAM,KAAK,IAAI,CAAC;AAChB,kBAAM,KAAK,IAAI,IAAI,CAAC;AAGpB,kBAAM,MAAM;AACZ,kBAAM,MAAM;AAEZ,kBAAM,UAAU,MAAM,CAAC;AACvB,kBAAM,UAAU,MAAM,MAAM,IAAI,CAAC;AACjC,kBAAM,MAAM,KAAK,UAAU,KAAK;AAChC,kBAAM,MAAM,KAAK,UAAU,KAAK;AAEhC,kBAAM,UAAU,MAAM,IAAI,CAAC;AAC3B,kBAAM,UAAU,MAAM,MAAM,IAAI,IAAI,CAAC;AACrC,kBAAM,MAAM,KAAK,UAAU,KAAK;AAChC,kBAAM,MAAM,KAAK,UAAU,KAAK;AAEhC,kBAAM,UAAU,MAAM,IAAI,CAAC;AAC3B,kBAAM,UAAU,MAAM,MAAM,IAAI,IAAI,CAAC;AACrC,kBAAM,MAAM,KAAK,UAAU,KAAK;AAChC,kBAAM,MAAM,KAAK,UAAU,KAAK;AAGhC,kBAAM,MAAM,MAAM;AAClB,kBAAM,MAAM,MAAM;AAClB,kBAAM,MAAM,MAAM;AAClB,kBAAM,MAAM,MAAM;AAClB,kBAAM,MAAM,MAAM;AAClB,kBAAM,MAAM,MAAM;AAClB,kBAAM,MAAM,OAAO,MAAM;AACzB,kBAAM,MAAM,OAAO,MAAM;AAGzB,kBAAM,MAAM,MAAM;AAClB,kBAAM,MAAM,MAAM;AAElB,kBAAM,MAAM,MAAM;AAClB,kBAAM,MAAM,MAAM;AAElB,kBAAM,MAAM,MAAM;AAClB,kBAAM,MAAM,MAAM;AAElB,kBAAM,MAAM,MAAM;AAClB,kBAAM,MAAM,MAAM;AAElB,gBAAI,CAAC,IAAI;AACT,gBAAI,IAAI,CAAC,IAAI;AACb,gBAAI,CAAC,IAAI;AACT,gBAAI,IAAI,CAAC,IAAI;AACb,gBAAI,CAAC,IAAI;AACT,gBAAI,IAAI,CAAC,IAAI;AACb,gBAAI,CAAC,IAAI;AACT,gBAAI,IAAI,CAAC,IAAI;AAAA,UACf;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAKA,IAAAA,KAAI,UAAU,oBAAoB,SAAS,kBAAkB,QAAQ,KACR,MAAM;AACjE,YAAM,MAAM,KAAK;AACjB,YAAM,OAAO,KAAK;AAElB,YAAM,QAAQ,KAAK,GAAG;AACtB,YAAM,QAAQ,KAAK,MAAM,CAAC;AAC1B,YAAM,OAAO,KAAK,MAAM,IAAI;AAC5B,YAAM,OAAO,KAAK,MAAM,OAAO,CAAC;AAEhC,YAAM,QAAQ,QAAQ;AACtB,YAAM,QAAQ,QAAQ;AACtB,YAAM,SAAS,QAAQ;AACvB,YAAM,SAAS,QAAQ;AAEvB,UAAI,MAAM,IAAI;AACd,UAAI,SAAS,CAAC,IAAI;AAClB,UAAI,SAAS,CAAC,IAAI;AAClB,UAAI,SAAS,CAAC,IAAI;AAAA,IACpB;AAKA,IAAAA,KAAI,UAAU,oBAAoB,SAAS,kBAAkB,QAAQ,KACR,MAAM;AACjE,YAAM,MAAM,KAAK;AACjB,YAAM,OAAO,KAAK;AAClB,YAAM,MAAM,KAAK,OAAO,KAAK;AAC7B,YAAM,QAAQ,OAAO;AACrB,YAAM,QAAQ,OAAO;AAGrB,YAAM,KAAK,KAAK,GAAG;AACnB,YAAM,KAAK,KAAK,MAAM,CAAC;AACvB,YAAM,KAAK,KAAK,MAAM,IAAI;AAC1B,YAAM,KAAK,KAAK,MAAM,OAAO,CAAC;AAC9B,YAAM,KAAK,KAAK,MAAM,KAAK;AAC3B,YAAM,KAAK,KAAK,MAAM,QAAQ,CAAC;AAC/B,YAAM,KAAK,KAAK,MAAM,KAAK;AAC3B,YAAM,KAAK,KAAK,MAAM,QAAQ,CAAC;AAG/B,YAAM,MAAM,KAAK;AACjB,YAAM,MAAM,KAAK;AACjB,YAAM,MAAM,KAAK;AACjB,YAAM,MAAM,KAAK;AACjB,YAAM,MAAM,KAAK;AACjB,YAAM,MAAM,KAAK;AACjB,YAAM,MAAM,OAAO,KAAK;AACxB,YAAM,MAAM,OAAO,KAAK;AAGxB,YAAM,MAAM,MAAM;AAClB,YAAM,MAAM,MAAM;AAElB,YAAM,MAAM,MAAM;AAClB,YAAM,MAAM,MAAM;AAElB,YAAM,MAAM,MAAM;AAClB,YAAM,MAAM,MAAM;AAElB,YAAM,MAAM,MAAM;AAClB,YAAM,MAAM,MAAM;AAElB,UAAI,MAAM,IAAI;AACd,UAAI,SAAS,CAAC,IAAI;AAClB,UAAI,SAAS,CAAC,IAAI;AAClB,UAAI,SAAS,CAAC,IAAI;AAClB,UAAI,SAAS,CAAC,IAAI;AAClB,UAAI,SAAS,CAAC,IAAI;AAClB,UAAI,SAAS,CAAC,IAAI;AAClB,UAAI,SAAS,CAAC,IAAI;AAAA,IACpB;AAGA,IAAAA,KAAI,UAAU,kBAAkB,SAAS,kBAAkB;AACzD,UAAI,MAAM,KAAK;AACf,UAAI,OAAO,KAAK;AAGhB,UAAI,QAAQ,KAAK;AACjB,UAAI,OAAO,KAAK;AAChB,UAAI,MAAO,OAAO,QAAS;AAE3B,UAAI;AACJ,UAAI;AACJ,UAAI,SAAS,KAAK;AAClB,UAAI,QAAQ,GAAG;AACb,aAAK,SAAS,GAAG,IAAI,GAAG,SAAS,MAAM,UAAU,KAAK,KAAK;AACzD,gBAAM,MAAM,OAAO,CAAC;AACpB,eAAK,sBAAsB,QAAQ,QAAQ,GAAG,SAAS,CAAC;AAAA,QAC1D;AAAA,MACF,OAAO;AAEL,aAAK,SAAS,GAAG,IAAI,GAAG,SAAS,MAAM,UAAU,KAAK,KAAK;AACzD,gBAAM,MAAM,OAAO,CAAC;AACpB,eAAK,sBAAsB,QAAQ,QAAQ,GAAG,SAAS,CAAC;AAAA,QAC1D;AAAA,MACF;AAGA,UAAI,MAAM,KAAK,OAAO,KAAK;AAC3B,UAAI,QAAQ,KAAK;AACjB,WAAK,SAAS,GAAG,QAAQ,GAAG,SAAS,GAAG;AACtC,cAAO,OAAO,QAAS;AACvB,YAAI,UAAU,QAAQ;AACtB,YAAI,aAAa,YAAY;AAC7B,YAAI,cAAc,eAAe;AAGjC,aAAK,SAAS,GAAG,SAAS,MAAM,UAAU,KAAK;AAC7C,mBAAS,IAAI,GAAG,IAAI,GAAG,KAAK,aAAa,KAAK,GAAG,KAAK,MAAM;AAC1D,gBAAI,IAAI,SAAS;AACjB,gBAAI,IAAI,IAAI;AACZ,gBAAI,IAAI,IAAI;AACZ,gBAAI,IAAI,IAAI;AAGZ,gBAAI,KAAK,IAAI,CAAC;AACd,gBAAI,KAAK,IAAI,IAAI,CAAC;AAClB,gBAAI,KAAK,IAAI,CAAC;AACd,gBAAI,KAAK,IAAI,IAAI,CAAC;AAClB,gBAAI,KAAK,IAAI,CAAC;AACd,gBAAI,KAAK,IAAI,IAAI,CAAC;AAClB,gBAAI,KAAK,IAAI,CAAC;AACd,gBAAI,KAAK,IAAI,IAAI,CAAC;AAGlB,gBAAI,MAAM;AACV,gBAAI,MAAM;AAEV,gBAAI,UAAU,MAAM,CAAC;AACrB,gBAAI,UAAU,MAAM,MAAM,IAAI,CAAC;AAC/B,gBAAI,MAAM,KAAK,UAAU,KAAK;AAC9B,gBAAI,MAAM,KAAK,UAAU,KAAK;AAE9B,gBAAI,UAAU,MAAM,IAAI,CAAC;AACzB,gBAAI,UAAU,MAAM,MAAM,IAAI,IAAI,CAAC;AACnC,gBAAI,MAAM,KAAK,UAAU,KAAK;AAC9B,gBAAI,MAAM,KAAK,UAAU,KAAK;AAE9B,gBAAI,UAAU,MAAM,IAAI,CAAC;AACzB,gBAAI,UAAU,MAAM,MAAM,IAAI,IAAI,CAAC;AACnC,gBAAI,MAAM,KAAK,UAAU,KAAK;AAC9B,gBAAI,MAAM,KAAK,UAAU,KAAK;AAG9B,gBAAI,MAAM,MAAM;AAChB,gBAAI,MAAM,MAAM;AAChB,gBAAI,MAAM,MAAM;AAChB,gBAAI,MAAM,MAAM;AAChB,gBAAI,MAAM,MAAM;AAChB,gBAAI,MAAM,MAAM;AAChB,gBAAI,MAAM,OAAO,MAAM;AACvB,gBAAI,MAAM,OAAO,MAAM;AAGvB,gBAAI,MAAM,MAAM;AAChB,gBAAI,MAAM,MAAM;AAEhB,gBAAI,MAAM,MAAM;AAChB,gBAAI,MAAM,MAAM;AAEhB,gBAAI,CAAC,IAAI;AACT,gBAAI,IAAI,CAAC,IAAI;AACb,gBAAI,CAAC,IAAI;AACT,gBAAI,IAAI,CAAC,IAAI;AAGb,gBAAI,MAAM,GAAG;AACX,kBAAI,MAAM,MAAM;AAChB,kBAAI,MAAM,MAAM;AAChB,kBAAI,CAAC,IAAI;AACT,kBAAI,IAAI,CAAC,IAAI;AACb;AAAA,YACF;AAGA,gBAAI,MAAM;AACR;AAOF,gBAAI,OAAO;AACX,gBAAI,OAAO,CAAC;AACZ,gBAAI,OAAO;AACX,gBAAI,OAAO,CAAC;AACZ,gBAAI,OAAO,CAAC,MAAM;AAClB,gBAAI,OAAO,CAAC,MAAM;AAClB,gBAAI,OAAO,CAAC,MAAM;AAClB,gBAAI,OAAO,CAAC,MAAM;AAElB,gBAAI,OAAO,OAAO;AAClB,gBAAI,OAAO,OAAO;AAElB,gBAAI,OAAO,OAAO;AAClB,gBAAI,OAAO,OAAO;AAElB,gBAAI,KAAK,SAAS,aAAa;AAC/B,gBAAI,KAAK,SAAS,UAAU;AAE5B,gBAAI,EAAE,IAAI;AACV,gBAAI,KAAK,CAAC,IAAI;AACd,gBAAI,EAAE,IAAI;AACV,gBAAI,KAAK,CAAC,IAAI;AAAA,UAChB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAKA,IAAAA,KAAI,UAAU,wBAAwB,SAAS,sBAAsB,QACA,KACA,MAAM;AACzE,YAAM,MAAM,KAAK;AACjB,YAAM,OAAO,KAAK;AAElB,YAAM,QAAQ,KAAK,GAAG;AACtB,YAAM,OAAO,KAAK,MAAM,IAAI;AAE5B,YAAM,QAAQ,QAAQ;AACtB,YAAM,SAAS,QAAQ;AAEvB,UAAI,MAAM,IAAI;AACd,UAAI,SAAS,CAAC,IAAI;AAClB,UAAI,SAAS,CAAC,IAAI;AAClB,UAAI,SAAS,CAAC,IAAI;AAAA,IACpB;AAKA,IAAAA,KAAI,UAAU,wBAAwB,SAAS,sBAAsB,QACA,KACA,MAAM;AACzE,YAAM,MAAM,KAAK;AACjB,YAAM,OAAO,KAAK;AAClB,YAAM,MAAM,KAAK,OAAO,KAAK;AAC7B,YAAM,QAAQ,OAAO;AACrB,YAAM,QAAQ,OAAO;AAGrB,YAAM,KAAK,KAAK,GAAG;AACnB,YAAM,KAAK,KAAK,MAAM,IAAI;AAC1B,YAAM,KAAK,KAAK,MAAM,KAAK;AAC3B,YAAM,KAAK,KAAK,MAAM,KAAK;AAG3B,YAAM,MAAM,KAAK;AACjB,YAAM,MAAM,KAAK;AACjB,YAAM,MAAM,KAAK;AACjB,YAAM,MAAM,OAAO,KAAK;AAGxB,YAAM,MAAM,MAAM;AAElB,YAAM,MAAM;AACZ,YAAM,MAAM,CAAC;AAEb,YAAM,MAAM,MAAM;AAElB,YAAM,MAAM;AACZ,YAAM,MAAM;AAEZ,UAAI,MAAM,IAAI;AACd,UAAI,SAAS,CAAC,IAAI;AAClB,UAAI,SAAS,CAAC,IAAI;AAClB,UAAI,SAAS,CAAC,IAAI;AAClB,UAAI,SAAS,CAAC,IAAI;AAClB,UAAI,SAAS,CAAC,IAAI;AAClB,UAAI,SAAS,CAAC,IAAI;AAClB,UAAI,SAAS,CAAC,IAAI;AAAA,IACpB;AAAA;AAAA;;;AC1fA,iBAAgB;AAiBT,IAAM,iBAAN,MAAM,gBAAe;AAAA;AAAA,EAE1B;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,gBAAgB,aAAa;AAClC,WAAO,IAAI;AAAA,MACT;AAAA,MACA,CAAC,WAAW,IAAI,aAAa,MAAM;AAAA,IACrC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,gBAAgB,aAAa;AAClC,WAAO,IAAI;AAAA,MACT;AAAA,MACA,CAAC,WAAW,IAAI,aAAa,MAAM;AAAA,IACrC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,eAAe,aAAa;AACjC,WAAO,IAAI,gBAAe,aAAa,CAAC,WAAW,MAAM,MAAM,CAAC;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,YAAY,aAAa,gBAAgB;AACvC,QAAI,cAAc,GAAG;AACnB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACrD;AACA,SAAK,eAAe;AAGpB,SAAK,OAAO,IAAI,WAAAC,QAAI,SAAS,IAAI,WAAW,CAAC;AAC7C,SAAK,kBAAkB;AACvB,SAAK,qBAAqB,KAAK,gBAAgB,KAAK,KAAK,IAAI;AAC7D,SAAK,mBAAmB,KAAK,gBAAgB,IAAI,KAAK,KAAK,IAAI;AAC/D,SAAK,iBAAiB,KAAK,gBAAgB,IAAI,KAAK,KAAK,IAAI;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,cAAc;AAChB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,cAAc,OAAO,SAAS,KAAK,gBAAgB,MAAM,MAAM,GAAG;AAChE,QAAI,MAAM,WAAW,KAAK,cAAc;AACtC,YAAM,IAAI;AAAA,QACR,0BAA0B,KAAK,YAAY,mBAAmB,MAAM,MAAM;AAAA,MAC5E;AAAA,IACF;AAEA,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,WAAK,mBAAmB,CAAC,IAAI,MAAM,CAAC;AAAA,IACtC;AACA,aAAS,IAAI,MAAM,QAAQ,IAAI,KAAK,mBAAmB,QAAQ,KAAK;AAClE,WAAK,mBAAmB,CAAC,IAAI;AAAA,IAC/B;AAGA,SAAK,KAAK,cAAc,KAAK,kBAAkB,KAAK,kBAAkB;AAEtE,SAAK,KAAK,iBAAiB,KAAK,gBAAgB;AAEhD,UAAM,KAAK,KAAK;AAChB,aAAS,IAAI,GAAG,IAAI,GAAG,QAAQ,KAAK,GAAG;AACrC,SAAG,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AAC5C,SAAG,IAAI,CAAC,IAAI;AAAA,IACd;AAEA,SAAK,KAAK,iBAAiB,KAAK,gBAAgB,KAAK,gBAAgB;AAIrE,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,aAAO,CAAC,IAAI,KAAK,eAAe,IAAI,CAAC;AAAA,IACvC;AACA,WAAO;AAAA,EACT;AACF;AAeA,SAAS,qBAAqB,OAAO;AAEX,QAAM,aAAa,CAAC;AAG5C,MAAI,oBAAoB;AAExB,MAAI,MAAM;AAEV,MAAI,WAAW;AAEf,WAAS,IAAI,GAAG,IAAI,MAAM,SAAS,GAAG,KAAK;AACzC,QAAI,MAAM,IAAI,CAAC,KAAK,KAAK,MAAM,CAAC,IAAI,GAAG;AAErC,0BAAoB;AACpB,iBAAW;AACX,YAAM,MAAM,CAAC;AAAA,IACf,WAAW,MAAM,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC,KAAK,GAAG;AAE5C,0BAAoB;AACpB,UAAI,aAAa,IAAI;AACnB,mBAAW,KAAK,QAAQ;AAAA,MAC1B;AAAA,IACF,WAAW,qBAAqB,MAAM,CAAC,IAAI,KAAK;AAC9C,YAAM,MAAM,CAAC;AACb,iBAAW;AAAA,IACb;AAAA,EACF;AAEA,SAAO;AACT;AAkBA,SAAS,kBAAkB,OAAO,MAAM;AACtC,QAAM,CAAC,IAAI,IAAI,EAAE,IAAI,CAAC,QAAQ,GAAG,OAAO,QAAQ,CAAC;AACjD,QAAM,CAAC,IAAI,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,CAAC;AAiBlD,QAAM,IAAI,KAAK,IAAI,KAAK,KAAK;AAC7B,QAAM,IAAI,EAAE,KAAK,MAAM,KAAK,MAAM,MAAM,KAAK,MAAO,KAAK,KAAM,KAAK;AACpE,QAAM,IAAK,KAAK,KAAK,KAAM,IAAI,KAAK,KAAK,KAAM,KAAK,KAAK,KAAM;AAE/D,QAAM,OAAO,CAAC,KAAK,IAAI;AACvB,QAAM,OAAO,IAAI,OAAO,OAAO,IAAI,OAAO;AAC1C,SAAO,CAAC,MAAM,IAAI;AACpB;AAgBO,IAAM,gBAAN,MAAM,eAAc;AAAA;AAAA,EAEzB;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA,oBAAoB;AAAA;AAAA,EAEpB,qBAAqB;AAAA;AAAA,EAErB,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQrB,OAAO,gBAAgB,aAAa;AAClC,WAAO,IAAI,eAAc,aAAa,CAAC,WAAW,IAAI,aAAa,MAAM,CAAC;AAAA,EAC5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,gBAAgB,aAAa;AAClC,WAAO,IAAI,eAAc,aAAa,CAAC,WAAW,IAAI,aAAa,MAAM,CAAC;AAAA,EAC5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,eAAe,aAAa;AACjC,WAAO,IAAI,eAAc,aAAa,CAAC,WAAW,MAAM,MAAM,CAAC;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,YAAY,aAAa,gBAAgB;AACvC,SAAK,kBAAkB,IAAI,eAAe,aAAa,cAAc;AACrE,SAAK,cAAc,eAAe,WAAW;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,cAAc;AAChB,WAAO,KAAK,gBAAgB;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,iBAAiB,WAAW;AAC9B,QAAI,CAAC,OAAO,SAAS,SAAS,KAAK,aAAa,KAAK,YAAY,GAAG;AAClE,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACzE;AACA,SAAK,oBAAoB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,IAAI,kBAAkB,QAAQ;AAC5B,QACE,CAAC,OAAO,SAAS,MAAM,KACvB,SAAS,KACT,SAAS,KAAK,oBACd;AACA,YAAM,IAAI;AAAA,QACR,uDAAuD,KAAK,kBAAkB;AAAA,MAChF;AAAA,IACF;AACA,SAAK,qBAAqB;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,IAAI,kBAAkB,IAAI;AACxB,QAAI,CAAC,OAAO,SAAS,EAAE,KAAK,KAAK,GAAG;AAClC,YAAM,IAAI,MAAM,yCAAyC;AAAA,IAC3D;AACA,SAAK,qBAAqB,KAAK,qBAAqB,OAAO,KAAK;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,kBAAkB,WAAW;AAC/B,QAAI,CAAC,OAAO,SAAS,SAAS,KAAK,aAAa,GAAG;AACjD,YAAM,IAAI,MAAM,wCAAwC;AAAA,IAC1D;AACA,SAAK,qBAAqB;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,UAAU,OAAO,YAAY;AAG3B,QAAI,KAAK,oBAAoB,KAAK,EAAG,QAAO,CAAC,GAAG,CAAC;AACjD,SAAK,MAAM,KAAK;AAChB,UAAM,oBAAoB,qBAAqB,KAAK,WAAW;AAC/D,QAAI,kBAAkB,WAAW,GAAG;AAGlC,aAAO,CAAC,GAAG,CAAC;AAAA,IACd;AAEA,UAAM,OAAO,KAAK,IAAI,GAAG,kBAAkB,IAAI,CAAC,MAAM,KAAK,YAAY,CAAC,CAAC,CAAC;AAK1E,UAAM,cAAc,kBAAkB;AAAA,MACpC,CAAC,MAAM,KAAK,YAAY,CAAC,KAAK,KAAK,oBAAoB;AAAA,IACzD;AACA,UAAM,CAAC,oBAAoB,OAAO,IAAI;AAAA;AAAA,MAEpC;AAAA,MACA,KAAK;AAAA,IACP;AAIA,WAAO,CAAC,aAAa,oBAAoB,KAAK,IAAI,SAAS,CAAG,CAAC;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,oBAAoB,OAAO;AACzB,QAAI,KAAK,uBAAuB,EAAG,QAAO;AAC1C,QAAI,YAAY;AAChB,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,mBAAa,MAAM,CAAC,KAAK;AAAA,IAC3B;AACA,WAAO,KAAK,KAAK,YAAY,MAAM,MAAM,IAAI,KAAK;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,OAAO;AAEX,SAAK,gBAAgB,cAAc,OAAO,KAAK,WAAW;AAU1D,QAAI,IAAI,IAAI,KAAK,YAAY,CAAC;AACR,QAAI;AAO1B,SAAK,IAAI,GAAG,IAAI,KAAK,YAAY,UAAU,IAAI,GAAG,KAAK;AACrD,WAAK,YAAY,CAAC,IAAK,IAAI,KAAK,YAAY,CAAC,IAAK;AAClD,WAAK,MAAM,CAAC,KAAK,IAAI,MAAM,MAAM,SAAS,IAAI,CAAC,KAAK;AAAA,IACtD;AAGA,WAAO,IAAI,KAAK,YAAY,QAAQ,KAAK;AACvC,WAAK,YAAY,CAAC,IAAI;AAAA,IACxB;AAAA,EACF;AACF;AAQA,SAAS,SAAS,GAAG;AAEnB;AACA,OAAK,KAAK;AACV,OAAK,KAAK;AACV,OAAK,KAAK;AACV,OAAK,KAAK;AACV,OAAK,KAAK;AACV;AACA,SAAO;AACT;",
  "names": ["FFT", "FFT"]
}
